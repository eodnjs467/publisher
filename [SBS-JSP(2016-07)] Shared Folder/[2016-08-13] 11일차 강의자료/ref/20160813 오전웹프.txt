#################################################################
10일차 숙제
- 강사가 제작한 SQL이 정답은 아니다
-> 강사도 결국은 프로그래머지 전문 DBA는 아니니까
-> 데이터만 정확하게 조회하는게 중요하다

1. EMP Table의 EMPNO, ENAME, HIREDATE, DEPTNO Column을 조회

SELECT EMPNO, ENAME, HIREDATE, DEPTNO
  FROM EMP;
-----------------------------------------------------------------
2. EMP Table의 MGR Column을 중복제거하여 "TestMGR" 이라는 별칭을 주고 조회

SELECT DISTINCT MGR AS TESTMGR
  FROM EMP;

-> 참고할점 : 중복을 제거해도 NULL인 애도 나온다.
-----------------------------------------------------------------

3. "SCOTT's salary : 3000" 처럼 Data가 한 Column에 표시되도록 조회 별칭은 "EMP_SAL"

SELECT ENAME || '''s salary : ' || SAL
  FROM EMP;

-----------------------------------------------------------------

4. EMP Table의 EMPNO, ENAME, JOB, MGR, HIREDATE Column은 항상 조회해야하는데 가끔 SAL, COMM, DEPTNO 도 함께 조회해야할때가 있으니 주석처리 하여, 주석만 지우면 모든 내용을 조회 할 수 있도록 Query 제작

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE
    --, SAL, COMM, DEPTNO
  FROM EMP;

-----------------------------------------------------------------

5. ENAME (사원이름) 이 SCOTT 인 사원조회

SELECT *
  FROM EMP
 WHERE ENAME = 'SCOTT';

-----------------------------------------------------------------

6. JOB(직책)이 'SALESMAN' 인 사원의 추가수당(COMM)을 제외한 급여의 연봉을 구하되 해당 Column의 별칭을 "ANNSAL" 로 주어 조회. 단, DEPTNO, ENAME, EMPNO, JOB, SAL, ANNSAL 순서로 조회되게 할것.

SELECT DEPTNO, ENAME, EMPNO, JOB, SAL, SAL*12 AS ANNSAL
  FROM EMP
 WHERE JOB = 'SALESMAN';



#################################################################

SELECT EMPNO, ENAME, SAL, DEPTNO
  FROM EMP
 WHERE SAL >= 3000
   AND DEPTNO = 10;


TRUE  AND NULL = NULL
FALSE AND NULL = FALSE

TRUE  OR  NULL = TRUE
FALSE OR  NULL = NULL


SELECT *
  FROM EMP
 WHERE HIREDATE > '81/01/01';

SELECT *
  FROM EMP
 WHERE ENAME >= 'F';

대소비교연산자는 ( >, >=, <=, < ,  =, !=, <>, ^= )
- 숫자 비교 가능

- Date 타입의 날짜 데이터도 비교 가능
-> 이전 날짜가 상대적으로 작은 날짜
-> 이후 날짜가 상대적으로 큰 날짜

- 문자열 데이터도 크기 비교 가능
-> 사전 알파벳 순서로 검사
-> 사전 표기대로 상대적으로 더 뒤에 있으면
   큰 문자열로 인식

참고) 문자열 크기를 비교 연산자를 쓰는 경우는 거의 없다.


논리부정 연산자 (NOT) 

SELECT *
  FROM EMP
 WHERE SAL = 3000;

SELECT *
  FROM EMP
 WHERE NOT SAL = 3000;

최종 결과의 TRUE/FALSE 값을 뒤집어 주는 역할
- 실무에서 이런식의 대소/등가 비교 연산자에 사용하는 경우는
  드물다

 11:05분에 시작

SELECT ENAME, SAL
  FROM EMP
 WHERE MGR = NULL;

비교연산자는 NULL과 연산이 될 경우,
결과값이 모두 NULL이 된다.

수치연산자도 NULL과 연산되면
모두 NULL이 된다.

SELECT ENAME, SAL, MGR
  FROM EMP
 WHERE MGR IS NULL;

특정 컬럼의 값이 NULL인지 여부를 확인하기 위해서는
IS NULL 연산자를 사용한다. ##중요하다##

SELECT ENAME, SAL
  FROM EMP
 WHERE MGR <> NULL; -- (X)

SELECT ENAME, SAL, MGR
  FROM EMP
 WHERE MGR IS NOT NULL;

IS'T 는 없는 문법

SELECT ENAME, COMM
  FROM EMP
 WHERE COMM = 300
    OR COMM = 500
    OR COMM = 1400;

SELECT ENAME, COMM
  FROM EMP
 WHERE COMM IN (300, 500, 1400);

IN 연산자는 한개의 컬럼에 값이 여러개일때 사용

--*(1)
SELECT ENAME, COMM
  FROM EMP
 WHERE COMM NOT IN (300, 500, 1400);
-----------------------------------------------------
POP-Quiz
- *(1) IN 연산자를 쓰지 않고 
       동일한 결과가 나오도록 SQL문을 제작해주세요!
-----------------------------------------------------

SELECT ENAME, COMM
  FROM EMP
 WHERE COMM != 300
   AND COMM <> 500
   AND COMM ^= 1400;

-----------------------------------------------------

SELECT ENAME, SAL
  FROM EMP
 WHERE SAL >= 1500
   AND SAL <= 3000;

BETWEEN A AND B : 컬럼의 값이 A ~ B 사이인거

SELECT ENAME, SAL
  FROM EMP
 WHERE SAL BETWEEN 1500 AND 3000;

--------------------------------------------------
숙제) BETWEEN A AND B 연산자가
     문자열과 날짜 데이터에도 사용이 가능한지
--------------------------------------------------
--*(2)
SELECT ENAME, SAL
  FROM EMP
 WHERE SAL NOT BETWEEN 1500 AND 3000;

-----------------------------------------------------
POP-Quiz
- *(2) BETWEEN A AND B 연산자를 쓰지 않고
       동일한 결과가 나오도록 SQL문을 제작해주세요!
-----------------------------------------------------

SELECT ENAME, SAL
  FROM EMP
 WHERE SAL < 1500
    OR SAL > 3000;

-----------------------------------------------------

SELECT ENAME
  FROM EMP
 WHERE ENAME LIKE '%A%';

와일드카드(WILDCARD)
- IT에서 특정 문자열이나 데이터를 대체할 수 있는 특수기호
-> 데이터나 문자열의 패턴을 사용하기 위해서 쓴다

'%A%'

'A' : TRUE
'BA' : TRUE
'DSDFSSDFBA' : TRUE
'ABBBBBB' : TRUE
'AD' : TRUE

SELECT ENAME
  FROM EMP
 WHERE ENAME LIKE '_A%';

SELECT ENAME
  FROM EMP
 WHERE ENAME NOT LIKE '%A%';

주의사항) SQL문의 조회 효율을 떨어뜨리는 원인이 될 수도 있다

SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME)
  FROM EMP;

SELECT SUBSTR(ENAME, 1,3),
       SUBSTR(ENAME, 4),
       LENGTH(ENAME),
       INSTR(ENAME, 'A'),
       CONCAT(ENAME, JOB),
       LPAD(SAL, 10, '*'),
       RPAD(SAL, 10, '*')
  FROM EMP;

SELECT CEIL(45.129),
       ROUND(45.129, 2),
       ROUND(45.129, 1),
       ROUND(45.129, 0),
       ROUND(45.129, -1),
       TRUNC(45.129, 2)
FROM DUAL;

DUAL테이블은 Dummy Table
- 데이터가 없는데, 임시데이터의 연산결과를 확인하고자 할때
  임의로 사용가능한 테이블

SELECT MOD(101, 2)
  FROM DUAL;

SELECT SYSDATE
  FROM DUAL;

SELECT SYSDATE + 10
  FROM DUAL;

SELECT EMPNO, ENAME, SYSDATE, HIREDATE, SYSDATE - HIREDATE
  FROM EMP;

SELECT HIREDATE,
       MONTHS_BETWEEN(SYSDATE, HIREDATE),
       ADD_MONTHS(HIREDATE, 6),
       NEXT_DAY(HIREDATE, '금'),
       LAST_DAY(HIREDATE)
  FROM EMP;

SELECT HIREDATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE), 0)
  FROM EMP;

SELECT ENAME, NEXT_DAY(ADD_MONTHS(HIREDATE, 6), '금')
  FROM EMP;

