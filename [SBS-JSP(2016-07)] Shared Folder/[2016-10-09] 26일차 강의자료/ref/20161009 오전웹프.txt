Session
- 쿠키 기술이랑 비슷

- 웹 클라이언트에서 웹 서버로 요청으로 보내면
  웹서버가 웹 클라이언트에게 데이터를 주면 무조건 저장

- 쿠키는 클라이언트쪽에서만 저장
-> 세션은 클라이언트랑 서버가 둘다 저장

- 이 데이터를 세션 아이디

1) 웹 클라이언트가 웹서버로 서비스를 최초 요청

2) 웹 서버는 서비스를 제공하면서
   세션 아이디를 하나 발급 (서버도 발급한 아이디를 저장)

3) 웹 클라이언트는 서비스를 제공 받으면서
   함께 받은 세션 아이디를 어딘가에 저장

4) 세션 아이디를 발급한 서버쪽의 서비스를 다시 요청하면
   이 세션 아이디를 서버에게 보이지 않게 계속 보낸다.

5) 만약에 클라이언트쪽에서 일정 시간이상 (세션 만료시간)
   아무런 요청이 없으면
   서버쪽 세션아이디가 사라진다.

6) 그러면 클라이언트 세션 아이디와 매칭되는
   서버측 세션 아이디가 없으므로,
   연결이 끊어졌다고 본다. (다시 세션 아이디 발급)


세션 : 단순히 ID만 가지고 있는 애는 아니다
-> 객체 : 우리가 원하는 다양한 데이터를 집어넣어서 쓸수 있다.

-> 세션(연결)이 유지되는 동안은 이 데이터를 
   동일한 도메인 내에서는 어디서든 쓸수 있다.

-> 데이터를 꺼내고 넣는게 쿠키보다 훨씬 쉽다.

--------------------------------------------------------------

<%@ page session="true" %>

getAttribute() ★★★★★★
- 세션 내장객체의 저장해놓은 속성데이터 가져오기

setAttribute() ★★★★★★
- 세션 내장객체에 속성데이터 저장

removeAttribute() ★★★★★★
- 세션 내장객체에 저장되있는 속성데이터 지우기

invalidate() ★★★★★★
- 현재 세션을 즉시 종료시키는 메서드

getMaxInactiveInterval()
- 세션의 유효시간 가져오기

setMaxInactiveInterval()
- 세션의 유효시간 정하기

--------------------------------------------------------------

p.348 페이지

session 내장객체를 이용한 로그인/로그아웃 구현
-> 필살기!

