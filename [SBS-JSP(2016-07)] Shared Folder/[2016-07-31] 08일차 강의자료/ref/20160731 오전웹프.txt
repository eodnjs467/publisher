상속을 받아서 오버라이딩한 메서드가 존재한다면
사용메서드는 
-> 자기에서 가까운 상속관계부터 찾아나간다.

##################################################

final class
최후의 클래스 : 다른 클래스가 상속할수 없는 클래스

final method
최후의 메서드 : 
다른 클래스가 상속받아와도 
오버라이딩은 할 수 없는 메서드
- 메서드 내용 바꾸지 말고 그대로 써! 라고 강제

final variable
최후의 변수 :
한번 값이 지정되고 나면, 값 변경이 불가능한 변수

--------------------------------------------------

getter / setter 메서드

private으로 선언된 변수의 값을 
- 저장하기 위해 사용하는 메서드 
: setter 메서드 / setSecret(){}
- 가져오기 위해 사용하는 메서드 
: getter 메서드 / getSecret(){}

이름을 만드는 방법이 정해져있다 (규칙)

Singleton myS = new Singleton();

##################################################

다형성(Polymorphism)

- 어떤 데이터타입의 참조변수는
  여러 데이터타입의 인스턴스를 참조할 수 있다.
-> 상속이 전제되어야 한다.

카드 내카드 = new 화투();
카드 내카드 = new 트럼프카드();

Parent myParent = new Child();
Parent myParent = new GrandChild();


Child myChild = new Child();
int   myInt   = 10;

Parent myParent;
Long   myLong;

myParent = myChild;
myLong   = myInt;


컴파일 타임 오류(Compile-Time Exception)
- 컴파일 자체가 불가능한 오류
- 문법적인 문제

런타임 오류(Runtime Exception)
- 컴파일이 잘됐어! 실행해보자!
- 실행하다가 에러


void buy (Product p){}

Tv samsungTv = new Tv();
Tv lgTv = new Tv();

XXX.buy(samsungTv);
Product p = samsungTv;

XXX.buy(lgTv);
Product p = lgTv;

XXX.buy(someComputer);
XXX.buy(someAudio);


다형성(폴리몰피즘) 왜 써요?

- 부모타입은 자식타입 모두를 커버할 수 있다

- 자식 타입별로 기능을 만들지 않아도 
  부모타임으로 자식 인스턴스를 받아들이게 만들면
  코드를 획기적으로 줄일수 있다

- 코드의 재사용성을 획기적으로 높일 수 있다.

- 공통코드 관리가 용이해진다!


Product[] p;
- 이렇게 배열을 사용하면
  객체 여러개를 집어넣을 수 있다.

- 그런데, 배열은 넣을수 있는 개수를 정해놓기 때문에
  더 많이 넣고자 할때 문제가 생긴다

이런 불편함을 해소하기 위해
Collection API를 활용한다.

#####################################################

추상 메서드(Abstract Method)

- public abstract int add(int a, int b);

- 선언부만 존재하고, 수행되는 코드는 정의하지 않은
  미완성 메서드

- 메서드의 리턴타입, 이름, 입력 파라미터 만
  정의되어 있다!

- {} <- 코드블록은 존재하지 않음

- 이런 추상 메서드를 가지고 있는 클래스는
  추상 클래스


추상 클래스(Abstract Class)
- 추상 메서드를 하나이상 가지고 있는 클래스

- 클래스 이름 앞에 'abstract'를 붙여준다

- 추상 클래스는 객체로 만들수 없다
-> 메모리를 얼마나 얻어와야할지 아직 알수없기 때문(미완성)


- 추상 클래스를 상속 받아서
  구현되지 않은 추상 메서드를 오버라이딩해서(구현해서)
  쓰라고 강제

#######################################################

인터페이스

- 자바세계에서 매우 특이한 참조형 데이터 타입

- 매우 극단적인 추상 클래스
-> 인터페이스 안에 선언되는 모든 변수는 다 상수
-> 인터페이스 안에 선언되는 모든 메서드는 다 추상메서드

- 인터페이스는 객체로 만드는 것이 불가능

왜쓰나?
- 표준 프로그래밍을 위해서 (*****)
-> 그래픽 드라이버

- 자바에서 불가능한 다중 상속을 흉내내기 위해 (***)
-> DVD 플레이가 가능한 TV

- 서로 관련없는 클래스들 간의 관계를 만들어 주기위해(*****)
-> DVD 플레이가 가능한 TV
-> Spring Framework
-> DI(Dependency Injection) : 의존성 주입
-> AOP(Aspect Orinted Programming) : 관점지향 프로그래밍


인터페이스에 선언하는 변수는 모두다
public static final 로 선언된다. (생략이 가능)
(public static final ) int CLOVER;

인터페이스에 선언하는 메서드는 모두다
public abstract 로 선언된다. (생략 가능)
(public abstract) String getCardKind();

