Gugu myGugu = new Gugu();
int[] guguArr;
guguArr = myGugu.evenGugu(i);
myGugu.printGugu(guguArr);

저번시간 숙제가 어려운 이유!

- 일단 메서드 제작 방법이 아직 익숙하지 않다.

- 참조형 데이터타입의 메서드 리턴타입 사용 익숙 X

- 메서드의 입력파라미터 타입이 참조형 데이터타입 익숙 X

- 객체를 만들어서 메서드를 사용하는 방법 익숙X

#######################################################

상속(Inheritance)

- 자바에서 클래스들끼리의 관계를 맺어주기 위해 사용

- 일반적으로 부모클래스, 자식클래스로 나뉘어진다.

- 자식 클래스는 부모 클래스가 가지고 있는
  재산(멤버 변수, 멤버 메서드)를 물려받는다.

- 자식 클래스는 자기가 선언하지 않은 변수
  제작해두지 않은 메서드를
  부모 클래스가 가지고 있던걸 그대로 가지고 있는것처럼
  사용할 수 있다.

- 반대로 부모 클래스는
  자식 클래스가 독립적으로 가지고 있는 (선언된)
  멤버는 접근할 수 없다 (사용불가)


부모클래스와 자식클래스의 (데이터타입으로서의) 크기!

부모 클래스 > 자식 클래스

Long myLong;
int  myInt = 10;

myLong = myInt;

int myInt = 10;
Long myLong = myInt;


Parent myParent;
Child myChild = new Child();

myParent = myChild;

Child myChild = new Child();
Parent myParent = myChild;
Parent myParent = new Child();


#########################################################

Object 클래스

- 모든 클래스의 부모 클래스

- 즉 상속여부를 지정하지 않은 클래스는
  기본적으로 Object 클래스를 상속받고 있다.

- Object클래스는 가장 큰 데이터타입이다!

#########################################################

오버라이딩(Overriding)

- 면접때 가장 자주 물어보는 개념
-> 오버로딩과 함께


- 상속을 통해 물려받은 메서드의
  코드블록 내 실행될 코드 내용을 바꾸는 기술

전제조건, 성립조건
- 반드시 상속으로 물려받은 메서드여야 한다. (*)
- 물려받은 메서드와 이름이 같아야 한다.
- 리턴 타입은 반드시 물려받을때와 동일해야한다. (*)
- 입력 파라미터(매개변수) 타입도 동일해야한다. (*)


면접관 왈 : 오버로딩과 오버라이딩의 차이점에 대해 말해주세요

오버로딩은
-> 하나의 클래스안에 동일한 이름의
   메서드를 여러개 만드는 방식을 의미합니다.

   메서드 이름이 동일해야하고,
   입력 파라미터의 개수나, 데이터타입이 달라야 성립합니다.
   리턴 타입은 영향을 주지 않죠.
   대표적인 예로 System.out.println() 이 있구요
   생성자도 오버로딩이 가능합니다 (ㅎㅎ 머리 긁적)

오버라이딩은
-> 상속을 통해 물려받은 메서드를 재정의하기 위해 사용합니다.
  
   부모클래스로부터 물려받은 메서드와
   이름이 같아야하고, 입력 파라미터의 개수, 종류도 같아야하고
   리턴 타입도 같아야 합니다.

   바뀌는 부분은 메서드 내 코드블록안의 실행 코드 뿐입니다.

######################################################
숙제1 : p.34 우측 그림에 있는 상속 구조대로
     클래스들을 만들고,
     각 클래스의 객체를 만들어서 메서드를 실행하는
     Test 클래스도 같이 만들어주세요!

자바 파일 열개를 다 주세요
Animal ~ AnimalTest
######################################################

######################################################
숙제2 : 다음주까지

-> Gugu.java GuguTest.java 파일을 사용
-> GuguChild, GuguChildTest 클래스를 제작

1) GuguChild 클래스는 Gugu 클래스를 상속받는다
2) GuguChild 클래스는 evenGugu() 메서드를 오버라이딩
-> 1차원 배열을 for문으로 만들어주고 있는데
   while 문으로 1차원 배열 만들어주도록 오버라이딩

2) GuguChild 클래스는 oddGugu() 메서드를 오버라이딩
-> 1차원 배열을 while문으로 만들어주고 있는데
   for 문으로 1차원 배열 만들어주도록 오버라이딩

3) GuguChild 클래스는 printGugu() 메서드 오버라이딩
-> 현재 1차원 배열을 받아서
   역순으로 홀수 인덱스 중 5번 인덱스를 제외한
   값들을 출력

   현재 1차원 배열을 받아서
   정순으로 짝수 인덱스 중 4번 인덱스를 제외하고
   값들을 출력

4) GuguChildTest 클래스는 GuguChild 를 사용하는 클래스
   9단 부터 2단까지 반복해서
   짝수단은 evenGugu, 홀수단은 oddGugu 쓰고
   출력할때는 printGugu() 메서드를 사용할 것


######################################################

캡슐화(Encapsulation)

- 데이터를 보호하겠다!
-> 특정 변수 혹은 메서드를
   아무나 접근하지 못하게 막겠다!

- 접근제어자
-> public, protected, default, private


패키지(Package)
- 관련되어 있는 클래스들이 모여있는 디렉토리

- 소스파일들의 구조에 대한 가독성
-> 소스파일 관리도 편하다!

src/db/
   /network/
   /login/

   
C:\SBSJSP\eclipse

C:.SBSJSP.eclipse

C:\SBSJSP\eclipse\*
C:\SBSJSP\eclipse\readme\*